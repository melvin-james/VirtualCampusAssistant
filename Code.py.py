# -*- coding: utf-8 -*-
"""QA With Gradio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/103QjlRantH9Ficfir_dOkKG1CpisM1lK
"""

from google.colab import drive
drive.mount('/content/drive')

pip install langchain

pip install pinecone-client

pip install pypdf

pip install sentence-transformers

pip install ctransformers

pip install gradio

pip install pyngrok

from pinecone import Pinecone
from langchain import PromptTemplate
from langchain.chains import RetrievalQA
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.document_loaders import PyPDFLoader, DirectoryLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.prompts import PromptTemplate
from langchain.llms import CTransformers
from langchain.vectorstores import Pinecone
import os

PINECONE_API_KEY = "04226932-04a8-4ac1-8277-520be166cb8e"
PINECONE_API_ENV = "gcp-starter"

#Extract data from the PDF
def load_pdf(data):
    loader = DirectoryLoader(data,
                    glob="*.pdf",
                    loader_cls=PyPDFLoader)

    documents = loader.load()

    return documents

extracted_data = load_pdf("/content/drive/MyDrive/Llama2 Chatbot/Data")

#Create text chunks
def text_split(extracted_data):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size = 500, chunk_overlap = 20)
    text_chunks = text_splitter.split_documents(extracted_data)

    return text_chunks

text_chunks = text_split(extracted_data)
#print("length of my chunk:", len(text_chunks))

#download embedding model
def download_hugging_face_embeddings():
    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    return embeddings

embeddings = download_hugging_face_embeddings()

embeddings

query_result = embeddings.embed_query("Hello world")
print("Length", len(query_result))

pip install -U langchain-pinecone

os.environ['PINECONE_API_KEY'] = '04226932-04a8-4ac1-8277-520be166cb8e'

index_name="virtual-receptionist"

#Creating Embeddings for Each of The Text Chunks & storing
docsearch=Pinecone.from_texts([t.page_content for t in text_chunks], embeddings, index_name=index_name)

#If we already have an index we can load it like this
docsearch=Pinecone.from_existing_index(index_name, embeddings)

query = "What are the courses offered?"

docs=docsearch.similarity_search(query, k=3)

print("Result", docs)

prompt_template="""
Use the following pieces of information to answer the user's question.
If you don't know the answer, just say that you don't know, don't try to make up an answer.

Context: {context}
Question: {question}

Only return the helpful answer below and nothing else.
Helpful answer:
"""

PROMPT=PromptTemplate(template=prompt_template, input_variables=["context", "question"])
chain_type_kwargs={"prompt": PROMPT}

#llm=CTransformers(model="/content/drive/MyDrive/Llama2 Chatbot/Model/llama-2-7b-chat.ggmlv3.q4_0.bin",
 #                 model_type="llama",
  #                config={'max_new_tokens':512,
   #                       'temperature':0.8})

pip install openai

import os
from langchain.llms import OpenAI
os.environ["OPENAI_API_KEY"]="sk-proj-i9jB4L6mhZs8FHj8J8PPT3BlbkFJhNOdQsOB8ap7t9fHTUW0"

retriever=docsearch.as_retriever(search_kwargs={"k":2})

qa_chain=RetrievalQA.from_chain_type(llm=OpenAI(),
                                     chain_type="stuff",
                                     retriever=retriever,
                                     return_source_documents=True)

import gradio as gr
import os
from langchain.llms import OpenAI

# Set OpenAI API Key
os.environ["OPENAI_API_KEY"] = "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"

# Define the function to process user input and generate response
def generate_response(user_input):
    # Load the OpenAI language model
    llm = OpenAI()

    # Pass the user input to the model and generate response
    result = qa_chain({"query": user_input})

    # Extract and return the response
    response = result["result"]
    return response

# Create a Gradio interface
iface = gr.Interface(
    fn=generate_response,
    inputs="text",
    outputs="text",
    title="JyoBo",
    theme = gr.themes.Soft(),
    description="Ask any question related to the provided context.",
    examples=[
        ["What are the courses offered?"],
        ["Tell about the canteen"],
        ["What are the cultural events conducted?"],
    ]
)

# Launch the interface
iface.launch()

while True:
    user_input=input(f"Input Prompt:")

    if user_input.lower() == "exit":
        print("Exiting...")
        break

    result=qa_chain({"query": user_input})
    print("Response : ", result["result"])